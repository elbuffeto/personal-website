/// Function font-size
/// Function that returns a fluid font
/// @link https://www.madebymike.com.au/writing/fluid-type-calc-examples/
///
/// @require {map} $theme-breakpoints-font - defines breakpoints limits for fluid-typo in project
/// @require {function} test-unit - Test the unit of a number
/// @require {function} rem - Return rem from px
///
/// @param {string} $param [size-min] - minimum font-size (required)
/// @param {string} $param [size-max] - maximum font-size (required)
/// @param {string} $param [line-height] - line-height (optionnal)
///
@mixin font-size($min-size, $max-size, $line-height: null) {
  $max-width: map-get($theme-breakpoints-font, 'max');
  $min-width: map-get($theme-breakpoints-font, 'min');

  @if not unitless($min-size) and not unitless($max-size) {
    @if test-unit($min-size, rem) and test-unit($max-size, rem) {
      font-size: $min-size;

      @media (min-width: $min-width) {
        font-size: calc(#{$min-size} + #{strip-unit($max-size - $min-size)} * ((100vw - #{rem(strip-unit($min-width))}) / #{strip-unit($max-width - $min-width) / 10}));
      }

      @media (min-width: $max-width) {
        font-size: $max-size;
      }
    } @else {
      @error 'Wrong unit in your font-size: `#{$min-size}` and `#{$max-size}` must be rem.';
    }
  } @else {
    @error 'Missing unit in your font-size.';
  }

  @if $line-height {
    @if not unitless($line-height) {
      @error 'Line-height must be unitless to guarantee accessibility.';
    } @else {
      line-height: $line-height;
    }
  } @else {
    line-height: 1.5;
  }
};
